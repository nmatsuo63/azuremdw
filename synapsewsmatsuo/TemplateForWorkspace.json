{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "ワークスペース名",
			"defaultValue": "synapsewsmatsuo"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "'AzureDataLakeStorage1' の 'accountKey' のセキュリティで保護された文字列"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "'AzureSqlDatabase1' の 'connectionString' のセキュリティで保護された文字列"
		},
		"AzureSqlDatabase_streaming_connectionString": {
			"type": "secureString",
			"metadata": "'AzureSqlDatabase_streaming' の 'connectionString' のセキュリティで保護された文字列"
		},
		"CosmosDb_catalog_connectionString": {
			"type": "secureString",
			"metadata": "'CosmosDb_catalog' の 'connectionString' のセキュリティで保護された文字列"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "'FileServer1' の 'password' のセキュリティで保護された文字列"
		},
		"FileServer2_password": {
			"type": "secureString",
			"metadata": "'FileServer2' の 'password' のセキュリティで保護された文字列"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "'SqlServer1' の 'connectionString' のセキュリティで保護された文字列"
		},
		"SqlServer2_connectionString": {
			"type": "secureString",
			"metadata": "'SqlServer2' の 'connectionString' のセキュリティで保護された文字列"
		},
		"synapsewsmatsuo-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "'synapsewsmatsuo-WorkspaceDefaultSqlServer' の 'connectionString' のセキュリティで保護された文字列"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://southridgestorage01.dfs.core.windows.net"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Transactions_2018"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "southridge"
		},
		"FileServer2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Rentals"
		},
		"FileServer2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "southridge"
		},
		"synapsewsmatsuo-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://southridgestorage01.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_Rentals')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_t2t",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/"
							},
							{
								"name": "Destination",
								"value": "synapsefsmatsuo/fourthcoffee/Rentals/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_t2t",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_t2t",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T06:17:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_t2t')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_t2t')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_Transactions_2018')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_lgh",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/"
							},
							{
								"name": "Destination",
								"value": "synapsefsmatsuo/fourthcoffee/Transactions_2018/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_lgh",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_lgh",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T06:15:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_lgh')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_lgh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_VanArsdel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_g74",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "workspace1/VanArsdel/"
							},
							{
								"name": "Destination",
								"value": "synapsefsmatsuo/VanArsdel/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_g74",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_g74",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T07:26:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_g74')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_g74')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_VanArsdel2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_vr9",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_vr9",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "synapsefsmatsuo/VanArsdel/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_vr9",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_vr9",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Actors"
								},
								"destination": {
									"fileName": "dboActors.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "MovieActors"
								},
								"destination": {
									"fileName": "dboMovieActors.txt"
								}
							},
							{
								"source": {
									"table": "Movies"
								},
								"destination": {
									"fileName": "dboMovies.txt"
								}
							},
							{
								"source": {
									"table": "OnlineMovieMappings"
								},
								"destination": {
									"fileName": "dboOnlineMovieMappings.txt"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.txt"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_vr9')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_vr9')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_catalog')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_9cu",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies"
							},
							{
								"name": "Destination",
								"value": "synapsefsmatsuo/catalog/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['actors'][0]['name']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['availabilityDate']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['genre']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['rating']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['releaseYear']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['runtime']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['streamingAvailabilityDate']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['tier']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "$['_rid']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "$['_self']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "$['_etag']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "$['_attachments']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "$['_ts']"
										},
										"sink": {
											"ordinal": 15
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_9cu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_9cu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T05:01:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_9cu')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_9cu')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_cloudsales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_kp6",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_kp6",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "synapsefsmatsuo/cloudsales/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_kp6",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_kp6",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "OrderDetails"
								},
								"destination": {
									"fileName": "dboOrderDetails.txt"
								}
							},
							{
								"source": {
									"table": "Orders"
								},
								"destination": {
									"fileName": "dboOrders.txt"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T04:47:27Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_kp6')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_kp6')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_cloudstreaming')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_u9b",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_u9b",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "synapsefsmatsuo/cloudstreaming/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_u9b",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_u9b",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.txt"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-23T04:51:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_u9b')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_u9b')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Address')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Address",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Address')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Catalog')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transform_Catalog",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Catalog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SouthridgeCatalog": {},
									"VanArsdelActors": {},
									"VanArsdelMovies": {},
									"VanArsdelMovieActors": {},
									"Catalog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Catalog')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Customer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Southridge": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_DVDSales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transform_DVDSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderDetails": {},
									"Orders": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow2')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Rentals')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Rentals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VanArsdelTransactions": {},
									"FourthCoffeeRentalsTransactions": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_Rentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Streaming')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Catalog_cleansed')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Catalog",
						"folderPath": "intermediate/Catalog",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cloudsales_Address')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboAddresses.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboTransactions.txt",
						"folderPath": "cloudstreaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboTransactions.txt",
						"folderPath": "cloudstreaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "1635b1ab-22e3-4cf4-8ad1-000015b8f6d1",
						"type": "String"
					},
					{
						"name": "e6a138ae-ad8a-4fa6-a661-5d0ca65f05d4",
						"type": "String"
					},
					{
						"name": "2a1bfe7d-1abb-48f4-981e-cbecdff77cda",
						"type": "String"
					},
					{
						"name": "2017-06-04 22:09:31.0000000",
						"type": "String"
					},
					{
						"name": "2017-06-05 00:39:31.0000000",
						"type": "String"
					},
					{
						"name": "2017-06-04 00:00:00.0000000",
						"type": "String"
					},
					{
						"name": "2017-06-05 00:00:00.0000000",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrderDetails.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrders.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText5')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers.txt",
						"folderPath": "fourthcoffee/Rentals",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText6')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrderDetails.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText7')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrders.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "intermediate/DVDSales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_9cu')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "catalog",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_g74')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_kp6')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_lgh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fourthcoffee/Transactions_2018",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_t2t')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fourthcoffee/Rentals",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_u9b')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "cloudstreaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_v7q')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_vr9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FourthCofee_Customers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers.txt",
						"folderPath": "fourthcoffee/Rentals",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FourthCofffee_Transactions')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Transactions.txt",
						"folderPath": "fourthcoffee/Rentals",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rentals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Rentals",
						"folderPath": "intermediate/Rentals",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_9cu')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb_catalog",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": "movies"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDb_catalog')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_g74')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "VanArsdel",
						"fileSystem": "workspace1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_kp6')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_lgh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "MovieID",
						"type": "String"
					},
					{
						"name": "RentalDate",
						"type": "String"
					},
					{
						"name": "ReturnDate",
						"type": "String"
					},
					{
						"name": "RentalCost",
						"type": "String"
					},
					{
						"name": "LateFee",
						"type": "String"
					},
					{
						"name": "RewindFlag",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_t2t')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ActorID",
						"type": "String"
					},
					{
						"name": "ActorName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/FileServer2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_u9b')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_streaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_streaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_v7q')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_vr9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SouthridgeCustomer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridge_Catalog2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data_67dc84b8-43a6-499b-9ea6-f8371ff159bb_1c91e8a7-44a6-4cd4-9002-6ab69a168150.txt",
						"folderPath": "catalog",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridge_Catalog_raw')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data_67dc84b8-43a6-499b-9ea6-f8371ff159bb_1c91e8a7-44a6-4cd4-9002-6ab69a168150.txt",
						"folderPath": "catalog",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Streaming')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Streaming",
						"folderPath": "intermediate/Streaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArsdelActors')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboActors.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArsdelCustomer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArsdelMovies')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboMovies.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArsdel_MovieActors')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboMovieActors.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArsdel_Transactions')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboTransactions.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Vanarsdel_Customer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.txt",
						"folderPath": "VanArsdel",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cloudStreaming_Customer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.txt",
						"folderPath": "cloudstreaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cloudsalesCustomer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboCustomers.txt",
						"folderPath": "cloudsales",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cloudstreaming_Address')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboAddresses.txt",
						"folderPath": "cloudstreaming",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/intermid_Customers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "intermediate/Customer",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/intermid__Address')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsewsmatsuo-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "intermediate/Address",
						"fileSystem": "synapsefsmatsuo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsewsmatsuo-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase_streaming')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_streaming_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb_catalog')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb_catalog_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FileServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FileServer2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer2_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer2_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer2_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-VanArsdel",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime-VanArsdel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-VanArsdel",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime-VanArsdel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsewsmatsuo-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsewsmatsuo-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsewsmatsuo-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsewsmatsuo-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime-VanArsdel')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime-VanArsdel2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Catalog')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Southridge_Catalog2",
								"type": "DatasetReference"
							},
							"name": "SouthridgeCatalog"
						},
						{
							"dataset": {
								"referenceName": "VanArsdelActors",
								"type": "DatasetReference"
							},
							"name": "VanArsdelActors"
						},
						{
							"dataset": {
								"referenceName": "VanArsdelMovies",
								"type": "DatasetReference"
							},
							"name": "VanArsdelMovies"
						},
						{
							"dataset": {
								"referenceName": "VanArsdel_MovieActors",
								"type": "DatasetReference"
							},
							"name": "VanArsdelMovieActors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Catalog_cleansed",
								"type": "DatasetReference"
							},
							"name": "Catalog"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "union1"
						},
						{
							"name": "VanArsdelJoin1"
						},
						{
							"name": "VanArsdelJoin2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SouthridgeCatalog",
						"source(output(",
						"          ActorID as string,",
						"          ActorName as string,",
						"          Gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VanArsdelActors",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VanArsdelMovies",
						"source(output(",
						"          MovieActorID as string,",
						"          MovieID as string,",
						"          ActorID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VanArsdelMovieActors",
						"SouthridgeCatalog select(mapColumn(",
						"          Actor = Column_1,",
						"          ReleaseDate = Column_2,",
						"          Genre = Column_3,",
						"          Rating = Column_4,",
						"          AvailabilityYear = Column_5,",
						"          AvailabilityDate = Column_7,",
						"          MovieTier = Column_8,",
						"          MovieTitle = Column_9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"VanArsdelActors select(mapColumn(",
						"          ActorID,",
						"          Actor = ActorName,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"VanArsdelMovies select(mapColumn(",
						"          MovieID = Column_1,",
						"          MovieTitle = Column_2,",
						"          Category = Column_3,",
						"          Rating = Column_4,",
						"          RuntTimeMin = Column_5,",
						"          ReleaseDate = Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select1 derive(SourceID = 1,",
						"          ReleaseDate = toDate(ReleaseDate),",
						"          AvailabilityYear = toInteger(AvailabilityYear),",
						"          AvailabilityDate = toTimestamp(AvailabilityDate),",
						"          MovieTier = toInteger(MovieTier)) ~> derivedColumn1",
						"select5, select4 union(byName: true)~> union1",
						"VanArsdelMovieActors, select3 join(VanArsdelMovieActors@MovieID == select3@MovieID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> VanArsdelJoin1",
						"VanArsdelJoin1, select2 join(VanArsdelMovieActors@ActorID == select2@ActorID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> VanArsdelJoin2",
						"VanArsdelJoin2 derive(SourceID = 2,",
						"          AvailabilityYear = toInteger(right(ReleaseDate, 4)),",
						"          AvailabilityDate = toTimestamp(ReleaseDate),",
						"          ReleaseDate = toDate(ReleaseDate)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          MovieActorID,",
						"          MovieID = VanArsdelMovieActors@MovieID,",
						"          ActorID = VanArsdelMovieActors@ActorID,",
						"          MovieID = select3@MovieID,",
						"          MovieTitle,",
						"          Category,",
						"          Rating,",
						"          RuntTimeMin,",
						"          ReleaseDate,",
						"          ActorID = select2@ActorID,",
						"          ActorName = Actor,",
						"          Gender,",
						"          SourceID,",
						"          AvailabilityYear,",
						"          AvailabilityDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn1 select(mapColumn(",
						"          Actor,",
						"          ReleaseDate,",
						"          Genre,",
						"          Rating,",
						"          AvailabilityYear,",
						"          AvailabilityDate,",
						"          MovieTier,",
						"          MovieTitle,",
						"          SourceID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"union1 select(mapColumn(",
						"          Actor,",
						"          ReleaseDate,",
						"          Genre,",
						"          Rating,",
						"          AvailabilityYear,",
						"          AvailabilityDate,",
						"          MovieTier,",
						"          MovieTitle,",
						"          SourceID,",
						"          MovieID,",
						"          ActorID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 derive(CatalogID = uuid()) ~> derivedColumn3",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Catalog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Southridge_Catalog2')]",
				"[concat(variables('workspaceId'), '/datasets/VanArsdelActors')]",
				"[concat(variables('workspaceId'), '/datasets/VanArsdelMovies')]",
				"[concat(variables('workspaceId'), '/datasets/VanArsdel_MovieActors')]",
				"[concat(variables('workspaceId'), '/datasets/Catalog_cleansed')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Streaming",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          TransactionID = Column_1,",
						"          CustomerID = Column_2,",
						"          MovieID = Column_3,",
						"          StreamStart = Column_4,",
						"          StreamEnd = Column_5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(SourceID = 1) ~> derivedColumn1",
						"derivedColumn1 derive(UniqueOrderID = concat(toString(SourceID),TransactionID),",
						"          UniqueMovieID = concat(toString(SourceID),MovieID),",
						"          UniqueCustomerID = concat(toString(SourceID),CustomerID),",
						"          StreamStart = toTimestamp(StreamStart),",
						"          StreamEnd = toTimestamp(StreamEnd)) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/Streaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "OrderDetails"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference"
							},
							"name": "Orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText8",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderDetails",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Orders",
						"OrderDetails select(mapColumn(",
						"          OrderDetailsID = Column_1,",
						"          OrderID = Column_2,",
						"          MovieID = Column_3,",
						"          Quantity = Column_4,",
						"          {Unit Cost} = Column_5,",
						"          {Line Number} = Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Orders select(mapColumn(",
						"          OrderID = Column_1,",
						"          CustomerID = Column_2,",
						"          OrderDate = Column_3,",
						"          ShipDate = Column_4,",
						"          TotalCost = Column_5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 derive(SourceID = 1) ~> derivedColumn1",
						"derivedColumn1 derive(UniqueOrderID = concat(toString(SourceID), OrderID),",
						"          UniqueMovieID = concat(toString(SourceID), MovieID),",
						"          Quantity = toInteger(Quantity),",
						"          {Unit Cost} = toFloat({Unit Cost}),",
						"          {Line Number} = toInteger({Line Number})) ~> derivedColumn2",
						"select2 derive(UniqueCustomerID = concat(toString(1), CustomerID),",
						"          OrderDate = toTimestamp(OrderDate),",
						"          ShipDate = toTimestamp(ShipDate),",
						"          TotalCost = toFloat(TotalCost)) ~> derivedColumn4",
						"derivedColumn2, derivedColumn4 join(select1@OrderID == select2@OrderID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText4')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText8')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Address')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Cloudsales_Address",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "cloudstreaming_Address",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Vanarsdel_Customer",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "FourthCofee_Customers",
								"type": "DatasetReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "intermid__Address",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn9"
						},
						{
							"name": "select7"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source4",
						"select7 derive(SourceID = 1) ~> derivedColumn1",
						"derivedColumn1 derive(UniqueID = concat(toString(SourceID), CustomerID, AddressID)) ~> derivedColumn2",
						"select8 derive(SourceID = 1) ~> derivedColumn3",
						"derivedColumn3 derive(UniqueID = concat(toString(SourceID), CustomerID, AddressID)) ~> derivedColumn4",
						"source3 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          AddressLine1 = Column_4,",
						"          AddressLine2 = Column_5,",
						"          City = Column_6,",
						"          State = Column_7,",
						"          ZipCode = Column_8,",
						"          PhoneNumber = Column_9,",
						"          CreatedDate = Column_10,",
						"          UpdatedDate = Column_11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select9 derive(SourceID = 2) ~> derivedColumn5",
						"derivedColumn5 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn6",
						"source4 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          AddressLine1 = Column_4,",
						"          AddressLine2 = Column_5,",
						"          City = Column_6,",
						"          State = Column_7,",
						"          ZipCode = Column_8,",
						"          PhoneNumber = Column_9,",
						"          CreatedDate = Column_10,",
						"          UpdatedDate = Column_11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select10 derive(SourceID = 3) ~> derivedColumn7",
						"derivedColumn7 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn8",
						"derivedColumn2, derivedColumn4, derivedColumn6, derivedColumn8 union(byName: true)~> union1",
						"union1 derive(CreatedDate = toTimestamp(CreatedDate),",
						"          UpdatedDate = toTimestamp(UpdatedDate)) ~> derivedColumn9",
						"source1 select(mapColumn(",
						"          AddressID = Column_1,",
						"          CustomerID = Column_2,",
						"          AddressLine1 = Column_3,",
						"          AddressLine2 = Column_4,",
						"          City = Column_5,",
						"          State = Column_6,",
						"          ZipCode = Column_7,",
						"          CreatedDate = Column_8,",
						"          UpdatedDate = Column_9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"source2 select(mapColumn(",
						"          AddressID = Column_1,",
						"          CustomerID = Column_2,",
						"          AddressLine1 = Column_3,",
						"          AddressLine2 = Column_4,",
						"          City = Column_5,",
						"          State = Column_6,",
						"          ZipCode = Column_7,",
						"          CreatedDate = Column_8,",
						"          UpdatedDate = Column_9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select3 select(mapColumn(",
						"          CustomerID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"select5 select(mapColumn(",
						"          CustomerID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"derivedColumn9 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Cloudsales_Address')]",
				"[concat(variables('workspaceId'), '/datasets/cloudstreaming_Address')]",
				"[concat(variables('workspaceId'), '/datasets/Vanarsdel_Customer')]",
				"[concat(variables('workspaceId'), '/datasets/FourthCofee_Customers')]",
				"[concat(variables('workspaceId'), '/datasets/intermid__Address')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Customer')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cloudsalesCustomer",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "cloudStreaming_Customer",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Vanarsdel_Customer",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "FourthCofee_Customers",
								"type": "DatasetReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "intermid_Customers",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "select6"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn9"
						},
						{
							"name": "derivedColumn10"
						},
						{
							"name": "derivedColumn11"
						},
						{
							"name": "derivedColumn12"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source4",
						"source1 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          PhoneNumber = Column_4,",
						"          CreatedDate = Column_5,",
						"          UpdatedDate = Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(SourceID = 1) ~> derivedColumn1",
						"derivedColumn1 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn2",
						"source2 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          PhoneNumber = Column_4,",
						"          CreatedDate = Column_5,",
						"          UpdatedDate = Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(SourceID = 1) ~> derivedColumn3",
						"derivedColumn3 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn4",
						"source3 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          AddressLine1 = Column_4,",
						"          AddressLine2 = Column_5,",
						"          City = Column_6,",
						"          State = Column_7,",
						"          ZipCode = Column_8,",
						"          PhoneNumber = Column_9,",
						"          CreatedDate = Column_10,",
						"          UpdatedDate = Column_11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 select(mapColumn(",
						"          CustomerID,",
						"          LastName,",
						"          FirstName,",
						"          PhoneNumber,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 derive(SourceID = 2) ~> derivedColumn5",
						"derivedColumn5 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn6",
						"source4 select(mapColumn(",
						"          CustomerID = Column_1,",
						"          LastName = Column_2,",
						"          FirstName = Column_3,",
						"          AddressLine1 = Column_4,",
						"          AddressLine2 = Column_5,",
						"          City = Column_6,",
						"          State = Column_7,",
						"          ZipCode = Column_8,",
						"          PhoneNumber = Column_9,",
						"          CreatedDate = Column_10,",
						"          UpdatedDate = Column_11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select6 derive(SourceID = 3) ~> derivedColumn7",
						"derivedColumn7 derive(UniqueID = concat(toString(SourceID), CustomerID)) ~> derivedColumn8",
						"select5 select(mapColumn(",
						"          CustomerID,",
						"          LastName,",
						"          FirstName,",
						"          PhoneNumber,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"derivedColumn9, derivedColumn10, derivedColumn11, derivedColumn12 union(byName: true)~> union1",
						"derivedColumn2 derive(CreatedDate = toTimestamp(CreatedDate),",
						"          UpdatedDate = toTimestamp(UpdatedDate)) ~> derivedColumn9",
						"derivedColumn4 derive(CreatedDate = toTimestamp(CreatedDate),",
						"          UpdatedDate = toTimestamp(UpdatedDate)) ~> derivedColumn10",
						"derivedColumn6 derive(CreatedDate = toTimestamp(CreatedDate),",
						"          UpdatedDate = toTimestamp(UpdatedDate)) ~> derivedColumn11",
						"derivedColumn8 derive(CreatedDate = toTimestamp(CreatedDate,'yyyy-mm-dd'),",
						"          UpdatedDate = toTimestamp(UpdatedDate,'yyyy-mm-dd')) ~> derivedColumn12",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/cloudsalesCustomer')]",
				"[concat(variables('workspaceId'), '/datasets/cloudStreaming_Customer')]",
				"[concat(variables('workspaceId'), '/datasets/Vanarsdel_Customer')]",
				"[concat(variables('workspaceId'), '/datasets/FourthCofee_Customers')]",
				"[concat(variables('workspaceId'), '/datasets/intermid_Customers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_Rentals')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VanArsdel_Transactions",
								"type": "DatasetReference"
							},
							"name": "VanArsdelTransactions"
						},
						{
							"dataset": {
								"referenceName": "FourthCofffee_Transactions",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeRentalsTransactions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Rentals",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AddSourceIDToVanArsdel"
						},
						{
							"name": "AddSourceIDToFourthCoffee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as string,",
						"          CustomerID as string,",
						"          MovieID as string,",
						"          RentalDate as string,",
						"          ReturnDate as string,",
						"          RentalCost as string,",
						"          LateFee as string,",
						"          RewindFlag as string,",
						"          CreatedDate as string,",
						"          UpdatedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VanArsdelTransactions",
						"source(output(",
						"          TransactionID as string,",
						"          CustomerID as string,",
						"          MovieID as string,",
						"          RentalDate as string,",
						"          ReturnDate as string,",
						"          RentalCost as string,",
						"          LateFee as string,",
						"          RewindFlag as string,",
						"          CreatedDate as string,",
						"          UpdatedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FourthCoffeeRentalsTransactions",
						"AddSourceIDToVanArsdel, AddSourceIDToFourthCoffee union(byName: true)~> union1",
						"union1 derive(UniqueTransactionID = concat(toString(SourceID), TransactionID),",
						"          UniqueCustomerID = concat(toString(SourceID),CustomerID),",
						"          UniqueMovieID = concat(toString(SourceID),MovieID),",
						"          RentalDate = toTimestamp(RentalDate, 'yyyyMMdd'),",
						"          ReturnDate = toTimestamp(ReturnDate, 'yyyyMMdd'),",
						"          RentalCost = toFloat(RentalCost),",
						"          LateFee = toFloat(LateFee),",
						"          RewindFlag = toBoolean(RewindFlag)) ~> derivedColumn1",
						"VanArsdelTransactions derive(SourceID = 2,",
						"          CreatedDate = toTimestamp(CreatedDate),",
						"          UpdatedDate = toTimestamp(UpdatedDate)) ~> AddSourceIDToVanArsdel",
						"FourthCoffeeRentalsTransactions derive(SourceID = 3,",
						"          CreatedDate = toTimestamp(CreatedDate,'yyyy-MM-dd'),",
						"          UpdatedDate = toTimestamp(UpdatedDate, 'yyyy-MM-dd')) ~> AddSourceIDToFourthCoffee",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/VanArsdel_Transactions')]",
				"[concat(variables('workspaceId'), '/datasets/FourthCofffee_Transactions')]",
				"[concat(variables('workspaceId'), '/datasets/Rentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}